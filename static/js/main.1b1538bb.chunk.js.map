{"version":3,"sources":["resources/InvertedHorizontal.png","components/FEComponents/PickDataSource/Actions.ts","components/FEComponents/PickDataSource/Component.tsx","scripts/PhraseFinder.ts","components/FEComponents/InterlinearDisplay.tsx","components/FEComponents/PickFormatStyle.tsx","components/FEComponents/ReferenceSelect.tsx","components/FEComponents/FESwitches.tsx","components/FEColumn.tsx","pages/MainPage.tsx","pages/Settings/SettingsComponent.tsx","pages/Settings/SettingsActions.ts","pages/Settings/SettingsReducer.ts","pages/Settings/index.ts","pages/History.tsx","pages/Styles.tsx","components/LITEAppBar.tsx","App.tsx","serviceWorker.ts","components/FEComponents/PickDataSource/Reducer.ts","rootReducer.ts","store.ts","index.tsx"],"names":["module","exports","PickSourceActions","withLocalize","LineTypes","pickSourceState","useSelector","state","picksource","dispatch","useDispatch","_addSource","event","window","FileReader","Error","input","target","files","file","fr","onload","source","filename","name","flextext","result","type","ADD_SOURCE","payload","readAsText","e","console","log","message","Container","maxWidth","Grid","container","item","xs","FormControl","NativeSelect","value","currentSource","onChange","SELECT_SOURCE","inputProps","sources","map","FormHelperText","id","Button","variant","component","style","display","accept","xslBoilerplate","lineHeaders","PhraseFinder","xml","phrases","cliplines","this","undefined","flextextDoc","DOMParser","parseFromString","Array","prototype","slice","apply","getElementsByTagName","clipboard","split","getMatch","forEach","line","index","lexemes","join","shift","length","includes","innerHTML","parseByIndex","formatInput","parseByContent","clipIndex","parseFloat","passed","phrase","phraseIndex","firstElementChild","push","bestScore","score","itemMap","Map","lineType","parentElement","nodeName","getAttribute","content","get","set","lineScore","getLineScore","scores","clipline","levenshtein","Math","min","Alert","props","elevation","InterlinearColumnStyles","makeStyles","theme","createStyles","outputField","fontSize","minHeight","store","React","useState","open","status","localState","setLocalState","classes","_closeSnackbar","reason","Card","CardContent","Typography","InputBase","multiline","rows","fullWidth","location","document","URL","replace","xmlSource","find","axios","then","xsl","processor","XSLTProcessor","parser","phraseFinder","importStylesheet","data","transformToDocument","getPhrase","getElementsByClassName","documentElement","className","onClick","range","createRange","selectNode","getSelection","addRange","success","execCommand","Snackbar","autoHideDuration","onClose","severity","formatStyle","setState","IconButton","aria-label","Link","to","AddCircleOutline","referenceName","FormLabel","selectLabel","RadioGroup","FormControlLabel","control","Radio","label","TextField","FormGroup","row","Switch","Main","InterlinearDisplay","SettingsPageStyles","paper","borderRadius","padding","margin","width","SettingsActions","language","activeLanguage","code","Paper","setActiveLanguage","localStorage","setItem","localizedLanguages","lang","SettingsPage","History","FormatStyles","AppBarStyles","appBar","position","zIndex","drawer","title","flexGrow","menuButton","marginRight","spacing","drawerOpen","AppBar","Toolbar","edge","color","key","Menu","src","HorizontalLogo","height","alt","AccountCircle","Drawer","List","ListItem","button","ListItemIcon","Assignment","ListItemText","primary","Style","Divider","createMuiTheme","palette","main","AppRouter","ThemeProvider","basename","path","exact","MainPage","Boolean","hostname","match","defaultState","pickSourceReducer","action","darkThemeOn","rootReducer","combineReducers","localize","localizeReducer","temp","persistConfig","storage","persistedReducer","persistReducer","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","defaultLang","l","navigator","localizeInit","languages","translation","translations","options","renderToStaticMarkup","defaultLanguage","getItem","ReactDOM","render","loading","initialize","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1b1538bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/InvertedHorizontal.85852915.png\";","import {DataSourceState} from './Reducer';\r\n\r\nexport enum PickSourceActions {\r\n    ADD_SOURCE = \"ADD_SOURCE\",\r\n    SELECT_SOURCE = \"SELECT_SOURCE\"\r\n}\r\n\r\nexport type PickSourceAction =\r\n    | SelectSourceAction\r\n    | AddSourceAction;\r\n\r\n\r\ninterface SelectSourceAction {\r\n    type: PickSourceActions.SELECT_SOURCE,\r\n    payload: string\r\n}\r\n\r\nexport function selectSource(name: string) {\r\n    return {\r\n        type: PickSourceActions.SELECT_SOURCE,\r\n        payload: name\r\n    }\r\n}\r\n\r\ninterface AddSourceAction {\r\n    type: PickSourceActions.ADD_SOURCE,\r\n    payload: DataSourceState\r\n}\r\n\r\nexport function addSource(source: DataSourceState) {\r\n    return {\r\n        type: PickSourceActions.ADD_SOURCE,\r\n        payload: source\r\n    }\r\n}","import React from 'react';\r\nimport {useSelector, useDispatch,} from 'react-redux';\r\n\r\nimport { Translate, withLocalize } from 'react-localize-redux';\r\nimport { Container, FormControl, NativeSelect, FormHelperText, Button, Grid } from '@material-ui/core';\r\n\r\nimport { DataSourceState } from './Reducer';\r\nimport { StoreState } from '../../../rootReducer';\r\nimport { addSource, selectSource } from './Actions';\r\n\r\nexport interface PickSourceDispatchProps {\r\n    addSource: (newSource: DataSourceState) => void;\r\n}\r\n\r\nfunction PickDataSource() {\r\n\r\n    const pickSourceState = useSelector((state: StoreState) => state.picksource);\r\n    const dispatch = useDispatch();\r\n\r\n    const _selectSource = (event: React.ChangeEvent<{value: string}>) => {\r\n        dispatch(selectSource(event.target.value));\r\n    };\r\n\r\n    const _addSource = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        try {\r\n            //setup and check for browser compatibility\r\n            if (typeof window.FileReader !== 'function')\r\n                throw Error(\"The file API isn't supported on this browser.\");\r\n\r\n            let input = event.target;\r\n\r\n            if (!input)\r\n                throw Error(\"The browser does not properly implement the event object\");\r\n            if (!input.files)\r\n                throw Error(\"This browser does not support the `files` property of the file input.\");\r\n            if (!input.files[0])\r\n                return undefined;\r\n\r\n            let file = input.files[0];\r\n            let fr = new FileReader();\r\n\r\n            //define action to take after file has been read\r\n            fr.onload = () => {\r\n                dispatch(addSource({filename: file.name, flextext: fr.result as string}));\r\n            };\r\n\r\n            //read file\r\n            fr.readAsText(file);\r\n        }\r\n        catch(e) {\r\n            console.log(e.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n            <FormControl>\r\n                <NativeSelect\r\n                    value={pickSourceState.currentSource}\r\n                    onChange={_selectSource}\r\n                    inputProps={{\r\n                        name: 'currentSource'\r\n                    }}\r\n                    >\r\n                    {pickSourceState.sources.map((source: DataSourceState) => {\r\n                        return <option value={source.filename}>{source.filename}</option>\r\n                    })}\r\n                </NativeSelect>\r\n                <FormHelperText> <Translate id=\"pickDataSource.dataSource\" /> </FormHelperText>\r\n            </FormControl>\r\n            </Grid>\r\n                <Grid item xs={6}> \r\n                    <Button variant=\"contained\" component=\"label\">\r\n                        <Translate id=\"pickDataSource.addDataSource\" />\r\n                        <input\r\n                            type=\"file\"\r\n                            style={{ display: \"none\" }}\r\n                            id=\"fileInput\"\r\n                            accept=\".flextext\"\r\n                            onChange={(e) => _addSource(e)}\r\n                        />\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(PickDataSource);","import levenshtein from 'fast-levenshtein';\r\n\r\nconst xslBoilerplate = {\r\n    \"header\": \r\n    `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <document version=\"2\">\r\n    <interlinear-text guid=\"dcca1a8a-95bf-4814-897e-6587e7a2e75d\">\r\n    <paragraphs>\r\n    <paragraph>\r\n    <phrases>\r\n    <phrase>`,\r\n\r\n    \"tail\": \r\n    `</phrase>\r\n    </phrases>\r\n    </paragraph>\r\n    </paragraphs>\r\n    </interlinear-text>\r\n    </document>`\r\n};\r\n\r\nconst lineHeaders = [\r\n    \"Word\",\r\n    \"Morphemes\",\r\n    \"Lex.Entries\", //spaces removed before referenced\r\n    \"Lex.Gloss\",\r\n    \"Lex.Gram.Info\",\r\n    \"WordGloss\",\r\n    \"WordCat.\",\r\n    \"Free\",\r\n    \"Lit.\",\r\n]\r\n\r\nenum LineTypes {\r\n    CitationForm = \"morphcf\",\r\n    Gloss = \"morphgls\",\r\n    HN = \"morphhn\",\r\n    GramInfo = \"morphmsa\",\r\n    Category = \"morphpos\",\r\n    Text = \"morphtxt\",\r\n    Literal = \"phraselit\",\r\n    Note = \"phrasenote\",\r\n    Punctuation = \"wordpunct\",\r\n    Word = \"wordtxt\",\r\n    WordCat = \"wordcat\",\r\n    Free = \"phrasegls\",\r\n}\r\n\r\ninterface PhraseScore {\r\n    index: number,\r\n    score: number\r\n}\r\n\r\nclass PhraseFinder {\r\n    xml: string;\r\n    phrases: Element[] | undefined;\r\n    cliplines: string[];\r\n\r\n    constructor(xml: string) {\r\n        this.xml = xml;\r\n        if (typeof this.xml !== 'string')\r\n            this.phrases = undefined;\r\n        else {\r\n            let flextextDoc = new DOMParser().parseFromString(xml, \"text/xml\");\r\n            this.phrases = Array.prototype.slice.apply(flextextDoc?.getElementsByTagName(\"phrase\"));\r\n        }\r\n        this.cliplines = [];\r\n        \r\n    }\r\n\r\n    //applies boilerplate and returns complete .flextext phrase\r\n    getPhrase(clipboard: string): string {\r\n        this.cliplines = clipboard.split(\"\\n\")\r\n\r\n        if(!this.phrases)\r\n            return \"\";\r\n\r\n        return xslBoilerplate.header + this.getMatch() + xslBoilerplate.tail;\r\n    }\r\n\r\n    formatInput() {\r\n        this.cliplines.forEach((line, index) => {\r\n            line = line.split(\" \").join(\"\");\r\n            let lexemes = line.split(\"\\t\");\r\n            lexemes.shift();\r\n            if(lexemes.length >= 1) {\r\n                if(lineHeaders.includes(lexemes[0]))\r\n                    lexemes.shift(); //remove first item from lexemes\r\n            }\r\n\r\n            this.cliplines[index] = lexemes.join(\"\");\r\n        })\r\n    }\r\n\r\n    //find phrase that matches clipboard contents and return it as a string\r\n    getMatch(): string {\r\n        if(!this.phrases || this.phrases.length < 1)\r\n            return \"\";\r\n\r\n        else {        \r\n            if(this.phrases.length === 1)\r\n                return this.phrases[0].innerHTML;\r\n\r\n            this.parseByIndex();\r\n            if(this.phrases.length === 1)\r\n                return this.phrases[0].innerHTML;\r\n\r\n            this.formatInput();\r\n\r\n            this.parseByContent();\r\n\r\n            return this.phrases[0].innerHTML;\r\n        }\r\n    }\r\n\r\n    parseByIndex() {\r\n        // should have been handled, just keeping compiler happy\r\n        if(!this.phrases)\r\n            return;\r\n\r\n        //try to find index from clipboard\r\n        let clipIndex = parseFloat(this.cliplines[0].split(\"\\t\")[0]);\r\n        let passed: Element[] = [];\r\n\r\n        this.phrases.forEach(phrase  => {\r\n            //firstElementChild of a phrase is segment number\r\n            let phraseIndex = phrase.firstElementChild?.innerHTML;\r\n            if(phraseIndex && parseFloat(phraseIndex) === clipIndex)\r\n                passed.push(phrase);\r\n        })\r\n\r\n        if(passed.length >= 1)\r\n            this.phrases = passed;\r\n    }\r\n\r\n    parseByContent() {\r\n        let bestScore: PhraseScore = {index: 0, score: 10000};\r\n\r\n        this.phrases?.forEach((phrase, index) => {\r\n\r\n            //populate dictionary with empty string for each line type\r\n            let itemMap: Map<LineTypes, string> = new Map([]);\r\n            \r\n            let items = Array.prototype.slice.apply(phrase.getElementsByTagName(\"item\"));\r\n\r\n            items.forEach((item: Element) => {\r\n                let parent = item.parentElement?.nodeName as string;\r\n                let type = item.getAttribute(\"type\") as string;\r\n\r\n                let lineType = parent + type as LineTypes;\r\n                let content = itemMap.get(lineType);\r\n                \r\n                if(content)\r\n                    itemMap.set(lineType, content + item.innerHTML);\r\n                else\r\n                itemMap.set(lineType, item.innerHTML);\r\n            });\r\n\r\n            //score this phrase\r\n            let lineScore = this.getLineScore(itemMap);\r\n\r\n            //update best score\r\n            if(lineScore < bestScore.score)\r\n                bestScore = {index, score: lineScore};\r\n        })\r\n\r\n        //update phrases with best scoring phrase\r\n        if(this.phrases)\r\n            this.phrases = [this.phrases[bestScore.index]];\r\n    }\r\n\r\n    getLineScore(itemMap: Map<LineTypes, string>): number {\r\n        let scores: number[] = [];\r\n\r\n        itemMap.forEach((value: string) => {\r\n            this.cliplines.forEach(clipline => {\r\n                scores.push(levenshtein.get(clipline, value));\r\n            })\r\n        });\r\n\r\n        return Math.min(...scores);\r\n    }\r\n}\r\n\r\nexport default PhraseFinder;","import React from 'react';\r\nimport PickDataSource from './PickDataSource/Component';\r\nimport {Button, Container, Card, CardContent,  InputBase,\r\n    Typography, makeStyles, Theme, createStyles, Snackbar \r\n} from '@material-ui/core';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { Translate, withLocalize } from 'react-localize-redux';\r\nimport axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\nimport { StoreState } from '../../rootReducer';\r\nimport PhraseFinder from '../../scripts/PhraseFinder';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\ninterface ColumnLocalState {\r\n    open: boolean,\r\n    status: \"success\" | \"error\"\r\n}\r\n\r\nconst InterlinearColumnStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        outputField: {\r\n            fontSize: \"55%\",\r\n            minHeight: \"12vh\"\r\n        }\r\n    })\r\n);\r\n\r\nfunction InterlinearColumn() {\r\n    const store = useSelector((state: StoreState) => state)\r\n    const [localState, setLocalState] = React.useState<ColumnLocalState>({open: false, status: \"success\"});\r\n\r\n    const classes = InterlinearColumnStyles();\r\n\r\n    const _displayResult = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        try {\r\n            var clipboard: string = e.target.value || \"\";\r\n            if (clipboard === \"\") {\r\n                return;\r\n            }\r\n\r\n            var location = document.URL.replace('#/', '/'); //replace made necessary by HashRouter\r\n            const xmlSource = store.picksource.sources.find(\r\n                source => source.filename === store.picksource.currentSource)\r\n                ?.flextext;\r\n\r\n            if (typeof xmlSource !== 'string')\r\n                throw Error(\"File contents could not be read.\");\r\n\r\n            axios.get(location + \"xml2LeipzigLITE2.xsl\").then((xsl) => \r\n            {\r\n                var processor = new XSLTProcessor();\r\n                var parser = new DOMParser();\r\n                var phraseFinder = new PhraseFinder(xmlSource);\r\n\r\n                processor.importStylesheet(parser.parseFromString(xsl.data, \"text/xml\"));\r\n\r\n                var result = processor.transformToDocument(parser.parseFromString(phraseFinder.getPhrase(clipboard), \"text/xml\"));\r\n\r\n                var outputField = document.getElementsByClassName(classes.outputField)[0];\r\n\r\n                outputField.innerHTML = result.documentElement.innerHTML;\r\n            });\r\n        }\r\n        catch(e) {\r\n            console.log(e.message);\r\n        }\r\n    }\r\n\r\n    const _copyOut = () => {\r\n        var outputField = document.getElementsByClassName(classes.outputField)[0];\r\n        var range = document.createRange();\r\n\r\n        range.selectNode(outputField);\r\n\r\n        try{\r\n            window.getSelection()?.addRange(range);\r\n            var success = document.execCommand('copy') ? \"success\" : \"error\";\r\n            setLocalState({\r\n                open: true,\r\n                status: success as \"success\" | \"error\"\r\n            });\r\n        }\r\n        catch {\r\n            setLocalState({\r\n                open: true,\r\n                status: \"error\"\r\n            });\r\n        }\r\n    }\r\n\r\n    const _closeSnackbar = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n      \r\n        setLocalState({\r\n            open: false,\r\n            status: localState.status\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <PickDataSource />\r\n            <Card variant='outlined'>\r\n                <CardContent>\r\n                    <Typography>\r\n                        <Translate id=\"interlinearDisplay.input\" />\r\n                    </Typography>\r\n                    <InputBase\r\n                        multiline\r\n                        rows={4}\r\n                        fullWidth\r\n                        inputProps={{ 'aria-label': 'naked' }}\r\n                        onChange={_displayResult}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Card variant='outlined'>\r\n                <CardContent>\r\n                    <Typography>\r\n                        <Translate id=\"interlinearDisplay.output\" />\r\n                    </Typography>\r\n                    <div className={classes.outputField}/>\r\n                </CardContent>\r\n            </Card>\r\n            <Button onClick={_copyOut}> <Translate id=\"interlinearDisplay.copy\"/> </Button>\r\n            <Snackbar open={localState.open} autoHideDuration={6000} onClose={_closeSnackbar}>\r\n                <Alert onClose={_closeSnackbar} severity={localState.status}>\r\n                    <Translate id={\"interlinearDisplay.copyMessages.\" + localState.status}/>\r\n                </Alert>\r\n            </Snackbar>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(InterlinearColumn);","import React from 'react';\r\n\r\nimport { AddCircleOutline } from '@material-ui/icons';\r\nimport { Translate, withLocalize } from 'react-localize-redux';\r\nimport { Container, FormControl, NativeSelect, FormHelperText, IconButton } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\ninterface PickFormatStyleState {\r\n    formatStyle: string;\r\n}\r\n\r\nfunction PickFormatStyle() {\r\n\r\n    const [state, setState] = React.useState<PickFormatStyleState>({\r\n        formatStyle: \"\"\r\n    });\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: string }>) => {\r\n        const name = event.target.name as keyof typeof state;\r\n        setState({\r\n          ...state,\r\n          [name]: event.target.value,\r\n        });\r\n      };\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <FormControl>\r\n                <NativeSelect\r\n                value={state.formatStyle}\r\n                    onChange={handleChange}\r\n                    inputProps={{\r\n                        name: 'formatStyle'\r\n                    }}\r\n                    >\r\n                    <option value={1}>3-line GSRL Standard</option> \r\n                    <option value={2}>4-line GSRL Standard</option>\r\n                    {/* these values are temporary*/}\r\n                </NativeSelect>\r\n                <FormHelperText> <Translate id=\"pickFormatStyle.formatStyle\" /> </FormHelperText>\r\n            </FormControl>\r\n\r\n            <IconButton aria-label=\"create\" component={Link} to=\"/styles\">\r\n                    <AddCircleOutline />\r\n            </IconButton>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(PickFormatStyle);","import React from 'react';\r\n\r\nimport { Translate, withLocalize, LocalizeContextProps } from 'react-localize-redux';\r\nimport { Container, RadioGroup, Radio, FormControlLabel, TextField, Grid, FormLabel} from '@material-ui/core';\r\n\r\n\r\ninterface ReferenceSelectState {\r\n    referenceName: string;\r\n}\r\n\r\ninterface ReferenceSelectProps {\r\n    selectLabel: string;\r\n}\r\n\r\nfunction ReferenceSelect(props:  ReferenceSelectProps & LocalizeContextProps) {\r\n\r\n    const [state, setState] = React.useState<ReferenceSelectState>({\r\n        referenceName: \"\"\r\n    });\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <FormLabel><Translate id={\"referenceSelect.\" + props.selectLabel} /> </FormLabel>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <RadioGroup>\r\n                        <FormControlLabel value=\"first\" control={<Radio />} label={<Translate id='referenceSelect.firstOption'/>} />\r\n                        <FormControlLabel value=\"right\" control={<Radio />} label={<Translate id='referenceSelect.rightOption'/>} />\r\n                        <FormControlLabel value=\"none\" control={<Radio />} label={<Translate id='referenceSelect.noneOption'/>} />\r\n                    </RadioGroup>\r\n                </Grid>\r\n                <Grid item xs={6}> \r\n                    <TextField label={<Translate id=\"referenceSelect.name\"/>}/>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(ReferenceSelect);","import React from 'react';\r\nimport {withLocalize, Translate} from 'react-localize-redux';\r\nimport { FormGroup, FormControlLabel, Switch, Container } from '@material-ui/core';\r\n\r\nfunction FESwitches() {\r\n    return(\r\n        <Container maxWidth=\"sm\">\r\n            <FormGroup row={true}>\r\n                <FormControlLabel value=\"lit\" control={<Switch />} label={<Translate id='FESwitches.literalTranslation'/>}/>\r\n                <FormControlLabel value=\"notes\" control={<Switch />} label={<Translate id='FESwitches.notes'/>}/>\r\n                <FormControlLabel value=\"ungramm\" control={<Switch />} label={<Translate id='FESwitches.ungrammatical'/>}/>\r\n            </ FormGroup>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default withLocalize(FESwitches);","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport { withLocalize } from 'react-localize-redux';\r\nimport { ReferenceSelect, PickFormatStyle, FESwitches} from './FEComponents';\r\n\r\n\r\n\r\nfunction FEColumn() {\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <PickFormatStyle />\r\n            <ReferenceSelect selectLabel={\"languageNameSelect\"}/>\r\n            <ReferenceSelect selectLabel={\"dataSourceRefSelect\"}/>\r\n            <FESwitches />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(FEColumn);","import React from 'react';\r\n\r\nimport InterlinearDisplay from '../components/FEComponents/InterlinearDisplay';\r\nimport FEColumn from '../components/FEColumn';\r\n\r\nfunction Main() {\r\n    return (\r\n        <>\r\n            <div className=\"MainRow\">\r\n                <InterlinearDisplay />\r\n                <FEColumn />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { Paper, Theme, makeStyles, createStyles, FormControl, NativeSelect, FormLabel } from '@material-ui/core';\r\nimport { Translate, withLocalize, LocalizeContextProps } from 'react-localize-redux';\r\nimport { localizedLanguages } from \"../../index\";\r\n\r\n//language state is unnecessary, but retained as a template for now\r\ninterface SettingsState {\r\n    language: string;\r\n}\r\n\r\nconst SettingsPageStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paper: {\r\n            borderRadius: 15,\r\n            padding: 40,\r\n            margin: 20,\r\n            width: '55%'\r\n        }\r\n    })\r\n);\r\n\r\nfunction SettingsPage(props: LocalizeContextProps) {\r\n    const classes = SettingsPageStyles();\r\n\r\n    const [state, setState] = React.useState<SettingsState>({\r\n        language: props.activeLanguage.code\r\n    })\r\n\r\n    const setLanguage = (event: React.ChangeEvent<{ name?: string; value: string }>) => {\r\n        const name = event.target.name as keyof typeof state;\r\n        setState({\r\n          ...state,\r\n          [name]: event.target.value,\r\n        });\r\n        props.setActiveLanguage(event.target.value); //NOTE: this calls before setState() completes\r\n        localStorage.setItem('language', event.target.value);\r\n      };\r\n\r\n    return (\r\n        <Paper variant=\"outlined\" className={classes.paper}>\r\n            <h1><Translate id={\"settingsPage.title\"}/></h1>\r\n            \r\n            <FormControl>\r\n                <FormLabel><Translate id={\"settingsPage.language\"} /></FormLabel>\r\n                <NativeSelect onChange={setLanguage} inputProps={{name: 'language'}} value={state.language}>\r\n                    {localizedLanguages.map((lang) => {\r\n                        return (\r\n                            <option value={lang.code}>{lang.name}</option>\r\n                        )\r\n                    })}\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default withLocalize(SettingsPage);","export enum SettingsActions {\r\n    SET_LANGUAGE = \"SET_LANGUAGE\"\r\n}\r\n\r\nexport type SettingsAction = \r\n    | SetLanguageAction;\r\n\r\ninterface SetLanguageAction {\r\n    type: SettingsActions.SET_LANGUAGE,\r\n    payload: string\r\n}\r\n\r\nexport function setLanguage(lang: string) {\r\n    return {\r\n        type: SettingsActions.SET_LANGUAGE,\r\n        payload: lang\r\n    };\r\n}","import { SettingsAction, SettingsActions } from \"./SettingsActions\";\r\n\r\nexport interface SettingsState {\r\n    language: string;\r\n}\r\n\r\nexport const defaultState: SettingsState = {\r\n    language: \"en\"\r\n}\r\n\r\nconst settingsReducer = (\r\n    state: SettingsState = defaultState,\r\n    action: SettingsAction\r\n    ): SettingsState => \r\n    {\r\n        switch(action.type) {\r\n            case SettingsActions.SET_LANGUAGE:\r\n                state.language = action.payload;\r\n                return {...state};\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\nexport default settingsReducer;\r\n\r\n","import SettingsPage from './SettingsComponent';\r\nimport SettingsReducer from './SettingsReducer';\r\n\r\nexport {SettingsReducer};\r\n\r\nexport default SettingsPage;\r\n","import React from 'react';\r\n\r\nfunction History() {\r\n    return (\r\n        <div>\r\n            <h1> History Page Placeholder </h1>\r\n            LITEr is under development. Check back later for more updates!\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default History;","import React from 'react';\r\n\r\nfunction FormatStyles() {\r\n    return (\r\n        <div>\r\n            <h1> Format Styles Placeholder</h1>\r\n            LITEr is under development. Check back later for more updates!\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormatStyles;","import React from 'react';\r\nimport { withLocalize, Translate } from 'react-localize-redux';\r\nimport {AppBar, Toolbar, IconButton, makeStyles, Theme, createStyles, Drawer, List, ListItem, ListItemText, ListItemIcon, Divider, Button} from '@material-ui/core';\r\nimport {Menu, AccountCircle, Settings, History, Assignment, Style} from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport HorizontalLogo from '../resources/InvertedHorizontal.png';\r\n\r\nconst AppBarStyles = makeStyles((theme: Theme) => \r\n    createStyles({\r\n        appBar: {\r\n            position: \"relative\", //required for Chrome/Opera\r\n            zIndex: theme.zIndex.drawer + 1\r\n        },\r\n        title: {\r\n            flexGrow: 1\r\n        },\r\n        drawer: {\r\n            width: 240\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2)\r\n        }\r\n    }),\r\n);\r\n\r\nfunction LITEAppBar() {\r\n    const classes = AppBarStyles();\r\n\r\n    const [state, setState] = React.useState({\r\n        drawerOpen: false\r\n    });\r\n\r\n    const toggleDrawer = (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent,\r\n        ) => {\r\n          if (\r\n            event.type === 'keydown' &&\r\n            ((event as React.KeyboardEvent).key === 'Tab' ||\r\n              (event as React.KeyboardEvent).key === 'Shift')\r\n          ) {\r\n            return;\r\n          }\r\n      \r\n          setState({ ...state, drawerOpen: open });\r\n        };\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\" className={classes.appBar}>\r\n                <Toolbar >\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawer(!state.drawerOpen)}>\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <div className={classes.title}>\r\n                        <Button\r\n                            aria-label=\"settings\"\r\n                            color=\"inherit\"\r\n                            component={Link}\r\n                            to=\"/\"\r\n                        >\r\n                            <img src={HorizontalLogo} height=\"50\" alt=\"Reflex\"/>\r\n                        </Button>   \r\n                    </div>\r\n\r\n                    <IconButton\r\n                        aria-label=\"account\"\r\n                        color=\"inherit\"\r\n                    >\r\n                        <AccountCircle />\r\n                    </IconButton>\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            aria-label=\"settings\"\r\n                            color=\"inherit\"\r\n                            component={Link}\r\n                            to=\"/settings\"\r\n                        >                            \r\n                                <Settings />\r\n                        </IconButton>\r\n                </Toolbar >\r\n            </AppBar>\r\n            <Drawer variant=\"persistent\" open={state.drawerOpen} className={classes.drawer} classes={{paper: classes.drawer}}>\r\n                <Toolbar />\r\n                <List>\r\n                    <ListItem button key=\"convert\" component={ Link } to=\"/\">\r\n                        <ListItemIcon><Assignment /></ListItemIcon>\r\n                        <ListItemText primary={<Translate id=\"menuDrawer.convert\" />}/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"styles\" component={ Link } to=\"/styles\">\r\n                        <ListItemIcon><Style /></ListItemIcon>\r\n                        <ListItemText primary={<Translate id=\"menuDrawer.styles\" />}/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"history\" component={ Link } to=\"/history\">\r\n                        <ListItemIcon><History /></ListItemIcon>\r\n                        <ListItemText primary={<Translate id=\"menuDrawer.history\" />}/>\r\n                    </ListItem>\r\n                    \r\n                    <Divider />\r\n\r\n                    <ListItem button key=\"settings\" component={ Link } to=\"/settings\">\r\n                        <ListItemIcon><Settings /></ListItemIcon>\r\n                        <ListItemText primary={<Translate id=\"menuDrawer.settings\" />}/>\r\n                    </ListItem>\r\n                </List>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withLocalize(LITEAppBar);","import React from 'react';\r\nimport MainPage from './pages/MainPage';\r\nimport SettingsPage from './pages/Settings';\r\nimport History from './pages/History';\r\nimport FormatStyles from './pages/Styles';\r\nimport './App.css';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport LITEAppBar from './components/LITEAppBar';\r\n\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#6B4060\"\r\n    }\r\n  }\r\n})\r\n\r\nfunction AppRouter() {\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <HashRouter basename='/'>\r\n          <LITEAppBar />\r\n          <div className='App-header'>\r\n            <Route path=\"/\" exact component = {MainPage} />\r\n            <Route path=\"/settings\" exact component = {SettingsPage} />\r\n            <Route path=\"/history\" exact component = {History} />\r\n            <Route path=\"/styles\" exact component = {FormatStyles} />\r\n          </div>\r\n        </HashRouter>\r\n      </ThemeProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AppRouter;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { PickSourceAction, PickSourceActions } from './Actions';\r\n\r\nexport interface DataSourceState {\r\n    filename: string,\r\n    flextext: string\r\n}\r\n\r\nexport interface PickSourceState {\r\n    sources: DataSourceState[],\r\n    currentSource: string,\r\n}\r\n\r\nexport const defaultState: PickSourceState = {\r\n    sources: [\r\n        {\r\n            filename: \"No Available Sources\",\r\n            flextext: \"\"\r\n        }\r\n    ],\r\n    currentSource: \"No Available Sources\"\r\n}\r\n\r\nconst pickSourceReducer = (\r\n    state: PickSourceState | undefined,\r\n    action: PickSourceAction\r\n): PickSourceState => \r\n{\r\n    if(typeof state === 'undefined')\r\n        return defaultState;\r\n        \r\n    switch(action.type) {\r\n        case PickSourceActions.SELECT_SOURCE:\r\n            state.currentSource = action.payload;\r\n            return {...state};\r\n        case PickSourceActions.ADD_SOURCE:\r\n            state.sources.push(action.payload);\r\n            state.currentSource = action.payload.filename;\r\n            return {...state};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default pickSourceReducer;","import {combineReducers, Reducer} from 'redux';\r\nimport { localizeReducer, LocalizeState } from 'react-localize-redux';\r\nimport pickSourceReducer, { PickSourceState} from './components/FEComponents/PickDataSource/Reducer';\r\n\r\n\r\nexport interface StoreState {\r\n    temp: TempState;\r\n    localize: LocalizeState;\r\n    picksource: PickSourceState;\r\n}\r\n\r\ninterface TempState {\r\n  darkThemeOn: Boolean;\r\n}\r\n\r\nconst TEMP_ACTION = \"TEMP_ACTION\";\r\ntype TEMP_ACTION = typeof TEMP_ACTION;\r\n\r\ninterface TempAction {\r\n  type: TEMP_ACTION\r\n}\r\n\r\nexport type TempActions = TempAction;\r\n\r\nconst defaultState : TempState = {\r\n   darkThemeOn: false\r\n};\r\n\r\nexport const tempReducer = (state: TempState | undefined, action: TempActions): TempState => {\r\n    if (typeof state === 'undefined') {\r\n      state = defaultState // If state is undefined, initialize it with a default value\r\n    }\r\n    \r\n    return state;\r\n  }\r\n\r\nconst rootReducer: Reducer<StoreState> = combineReducers<StoreState>({\r\n  localize: localizeReducer,\r\n  temp: tempReducer,\r\n  picksource: pickSourceReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {renderToStaticMarkup} from 'react-dom/server'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker'; \r\n\r\nimport { Provider } from 'react-redux';\r\nimport { LocalizeProvider } from 'react-localize-redux';\r\nimport translations from './translations.json';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from \"./store\";\r\n\r\nexport const localizedLanguages = [\r\n  { name: \"English\", code: \"en\" },\r\n  { name: \"Español\", code: \"es\" },\r\n  { name: \"Français\", code: \"fr\" }\r\n];\r\n\r\n//check for default browser, resort to English if none found\r\nconst defaultLang = localizedLanguages.find(l => l.code === navigator.language) !== undefined\r\n    ? navigator.language\r\n    : \"en\";\r\n\r\nconst localizeInit = {\r\n  languages: localizedLanguages,\r\n  translation: translations,\r\n  options: {\r\n    renderToStaticMarkup,\r\n    defaultLanguage:\r\n      //check for saved language, then default\r\n      localStorage.getItem(\"language\") || defaultLang \r\n  }\r\n};\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <LocalizeProvider initialize={localizeInit}>\r\n        <App />\r\n      </LocalizeProvider>\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}