{"version":3,"sources":["components/FEComponents/PickDataSource.tsx","components/FEComponents/InterlinearDisplay.tsx","components/FEComponents/PickFormatStyle.tsx","components/FEComponents/ReferenceSelect.tsx","components/FEComponents/FESwitches.tsx","components/FEColumn.tsx","pages/MainPage.tsx","pages/Settings.tsx","components/LITEAppBar.tsx","App.tsx","serviceWorker.ts","rootReducer.ts","store.ts","index.tsx"],"names":["withLocalize","React","useState","filename","state","setState","Container","maxWidth","Grid","container","item","xs","FormControl","NativeSelect","value","onChange","event","name","target","inputProps","FormHelperText","id","Button","variant","Card","CardContent","Typography","InputBase","multiline","rows","fullWidth","className","formatStyle","IconButton","aria-label","AddCircleOutline","props","referenceName","FormLabel","selectLabel","RadioGroup","FormControlLabel","control","Radio","label","TextField","FormGroup","row","Switch","Main","InterlinearDisplay","SettingsPage","AppBarStyles","makeStyles","theme","createStyles","title","flexGrow","classes","AppBar","position","Toolbar","edge","color","Menu","AccountCircle","AppRouter","basename","path","exact","component","MainPage","Boolean","window","location","hostname","match","defaultState","darkThemeOn","tempReducer","action","combineReducers","localize","localizeReducer","temp","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","localizedLanguages","code","localizeInit","languages","translation","translations","options","renderToStaticMarkup","defaultLanguage","undefined","find","l","navigator","language","ReactDOM","render","StrictMode","initialize","loading","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0838b855.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Translate, withLocalize } from 'react-localize-redux';\r\nimport { Container, FormControl, NativeSelect, FormHelperText, Button, Grid } from '@material-ui/core';\r\n\r\n\r\ninterface PickDataSourceState {\r\n    filename: string;\r\n}\r\n\r\nfunction PickDataSource() {\r\n\r\n    const [state, setState] = React.useState<PickDataSourceState>({\r\n        filename: \"\"\r\n    });\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: string }>) => {\r\n        const name = event.target.name as keyof typeof state;\r\n        setState({\r\n          ...state,\r\n          [name]: event.target.value,\r\n        });\r\n      };\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n            <FormControl>\r\n                <NativeSelect\r\n                value={state.filename}\r\n                    onChange={handleChange}\r\n                    inputProps={{\r\n                        name: 'filename'\r\n                    }}\r\n                    >\r\n                    <option value={1}>IcelandicExample</option> \r\n                    <option value={2}>Marubo</option>\r\n                    <option value={3}>Sena</option>\r\n                    <option value={4}>Vulcan</option>\r\n                    {/* these values are temporary*/}\r\n                </NativeSelect>\r\n                <FormHelperText> <Translate id=\"pickDataSource.dataSource\" /> </FormHelperText>\r\n            </FormControl>\r\n            </Grid>\r\n                <Grid item xs={6}> \r\n                    <Button variant=\"contained\">\r\n                        <Translate id=\"pickDataSource.addDataSource\" />\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(PickDataSource);","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport PickDataSource from './PickDataSource';\r\nimport { CardContent, Typography, InputBase } from '@material-ui/core';\r\nimport { Translate, withLocalize } from 'react-localize-redux';\r\n\r\nfunction InterlinearColumn() {\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <PickDataSource />\r\n            <Card variant='outlined'>\r\n                <CardContent>\r\n                    <Typography>\r\n                        <Translate id=\"interlinearDisplay.input\" />\r\n                    </Typography>\r\n                    <InputBase\r\n                        multiline\r\n                        rows={4}\r\n                        fullWidth\r\n                        inputProps={{ 'aria-label': 'naked' }}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Card variant='outlined'>\r\n                <CardContent>\r\n                    <Typography>\r\n                        <Translate id=\"interlinearDisplay.output\" />\r\n                    </Typography>\r\n                    <div className='OutputField'/>\r\n                </CardContent>\r\n            </Card>\r\n            <Button> <Translate id=\"interlinearDisplay.copy\"/> </Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(InterlinearColumn);","import React from 'react';\r\n\r\nimport { AddCircleOutline } from '@material-ui/icons';\r\nimport { Translate, withLocalize } from 'react-localize-redux';\r\nimport { Container, FormControl, NativeSelect, FormHelperText, IconButton } from '@material-ui/core';\r\n\r\n\r\ninterface PickFormatStyleState {\r\n    formatStyle: string;\r\n}\r\n\r\nfunction PickFormatStyle() {\r\n\r\n    const [state, setState] = React.useState<PickFormatStyleState>({\r\n        formatStyle: \"\"\r\n    });\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: string }>) => {\r\n        const name = event.target.name as keyof typeof state;\r\n        setState({\r\n          ...state,\r\n          [name]: event.target.value,\r\n        });\r\n      };\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <FormControl>\r\n                <NativeSelect\r\n                value={state.formatStyle}\r\n                    onChange={handleChange}\r\n                    inputProps={{\r\n                        name: 'formatStyle'\r\n                    }}\r\n                    >\r\n                    <option value={1}>3-line GSRL Standard</option> \r\n                    <option value={2}>4-line GSRL Standard</option>\r\n                    {/* these values are temporary*/}\r\n                </NativeSelect>\r\n                <FormHelperText> <Translate id=\"pickFormatStyle.formatStyle\" /> </FormHelperText>\r\n            </FormControl>\r\n\r\n            <IconButton aria-label=\"create\">\r\n                    <AddCircleOutline />\r\n            </IconButton>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(PickFormatStyle);","import React from 'react';\r\n\r\nimport { Translate, withLocalize, LocalizeContextProps } from 'react-localize-redux';\r\nimport { Container, RadioGroup, Radio, FormControlLabel, TextField, Grid, FormLabel} from '@material-ui/core';\r\n\r\n\r\ninterface ReferenceSelectState {\r\n    referenceName: string;\r\n}\r\n\r\ninterface ReferenceSelectProps {\r\n    selectLabel: string;\r\n}\r\n\r\nfunction ReferenceSelect(props:  ReferenceSelectProps & LocalizeContextProps) {\r\n\r\n    const [state, setState] = React.useState<ReferenceSelectState>({\r\n        referenceName: \"\"\r\n    });\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <FormLabel><Translate id={\"referenceSelect.\" + props.selectLabel} /> </FormLabel>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <RadioGroup>\r\n                        <FormControlLabel value=\"first\" control={<Radio />} label={<Translate id='referenceSelect.firstOption'/>} />\r\n                        <FormControlLabel value=\"right\" control={<Radio />} label={<Translate id='referenceSelect.rightOption'/>} />\r\n                        <FormControlLabel value=\"none\" control={<Radio />} label={<Translate id='referenceSelect.noneOption'/>} />\r\n                    </RadioGroup>\r\n                </Grid>\r\n                <Grid item xs={6}> \r\n                    <TextField label={<Translate id=\"referenceSelect.name\"/>}/>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(ReferenceSelect);","import React from 'react';\r\nimport {withLocalize, Translate} from 'react-localize-redux';\r\nimport { FormGroup, FormControlLabel, Switch, Container } from '@material-ui/core';\r\n\r\nfunction FESwitches() {\r\n    return(\r\n        <Container maxWidth=\"sm\">\r\n            <FormGroup row={true}>\r\n                <FormControlLabel value=\"lit\" control={<Switch />} label={<Translate id='FESwitches.literalTranslation'/>}/>\r\n                <FormControlLabel value=\"notes\" control={<Switch />} label={<Translate id='FESwitches.notes'/>}/>\r\n                <FormControlLabel value=\"ungramm\" control={<Switch />} label={<Translate id='FESwitches.ungrammatical'/>}/>\r\n            </ FormGroup>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default withLocalize(FESwitches);","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport { withLocalize } from 'react-localize-redux';\r\nimport { ReferenceSelect, PickFormatStyle, FESwitches} from './FEComponents';\r\n\r\n\r\n\r\nfunction FEColumn() {\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <PickFormatStyle />\r\n            <ReferenceSelect selectLabel={\"languageNameSelect\"}/>\r\n            <ReferenceSelect selectLabel={\"dataSourceRefSelect\"}/>\r\n            <FESwitches />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(FEColumn);","import React from 'react';\r\n\r\nimport InterlinearDisplay from '../components/FEComponents/InterlinearDisplay';\r\nimport FEColumn from '../components/FEColumn';\r\n\r\nfunction Main() {\r\n    return (\r\n        <>\r\n            <div className=\"MainRow\">\r\n                <InterlinearDisplay />\r\n                <FEColumn />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nfunction SettingsPage() {\r\n    return (\r\n        <div>\r\n            <h1> Settings Page </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SettingsPage;","import React from 'react';\r\nimport { withLocalize } from 'react-localize-redux';\r\nimport {AppBar, Toolbar, IconButton, Typography, makeStyles, Theme, createStyles} from '@material-ui/core';\r\nimport {Menu, AccountCircle, Settings} from '@material-ui/icons';\r\n\r\nconst AppBarStyles = makeStyles((theme: Theme) => \r\n    createStyles({\r\n        title: {\r\n            flexGrow: 1\r\n        }\r\n    }),\r\n);\r\n\r\nfunction LITEAppBar() {\r\n    const classes = AppBarStyles();\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar >\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <Menu />\r\n                </IconButton>\r\n\r\n                <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\r\n                    LITEr\r\n                </Typography>\r\n\r\n                <IconButton\r\n                    aria-label=\"account\"\r\n                    color=\"inherit\"\r\n                >\r\n                    <AccountCircle />\r\n                </IconButton>\r\n\r\n                <IconButton\r\n                    edge=\"end\"\r\n                    aria-label=\"settings\"\r\n                    color=\"inherit\"\r\n                >\r\n                    <Settings />\r\n                </IconButton>\r\n            </Toolbar >\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default withLocalize(LITEAppBar);","import React from 'react';\nimport MainPage from './pages/MainPage';\nimport SettingsPage from './pages/Settings';\nimport './App.css';\nimport { HashRouter, Route } from 'react-router-dom';\nimport LITEAppBar from './components/LITEAppBar';\n\nfunction AppRouter() {\n  return (\n    <>\n    <LITEAppBar />\n      <HashRouter basename='/'>\n        <div className='App-header'>\n          <Route path=\"/\" exact component = {MainPage} />\n          <Route path=\"/settings\" exact component = {SettingsPage} />\n        </div>\n      </HashRouter>\n    </>\n  )\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, Reducer} from 'redux';\r\nimport { localizeReducer, LocalizeState } from 'react-localize-redux';\r\n\r\n\r\nexport interface StoreState {\r\n    temp: TempState;\r\n    localize: LocalizeState;\r\n}\r\n\r\ninterface TempState {\r\n  darkThemeOn: Boolean;\r\n}\r\n\r\nconst TEMP_ACTION = \"TEMP_ACTION\";\r\ntype TEMP_ACTION = typeof TEMP_ACTION;\r\n\r\ninterface TempAction {\r\n  type: TEMP_ACTION\r\n}\r\n\r\nexport type TempActions = TempAction;\r\n\r\nconst defaultState : TempState = {\r\n   darkThemeOn: false\r\n};\r\n\r\nconst tempReducer = (state: TempState | undefined, action: TempActions): TempState => {\r\n    if (typeof state === 'undefined') {\r\n      state = defaultState // If state is undefined, initialize it with a default value\r\n    }\r\n    \r\n    return state;\r\n  }\r\n\r\nexport const rootReducer: Reducer<StoreState> = combineReducers<StoreState>({\r\n  localize: localizeReducer,\r\n  temp: tempReducer\r\n});\r\n\r\nexport default tempReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport tempReducer from \"./rootReducer\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, tempReducer);\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\nexport const persistor = persistStore(store);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {renderToStaticMarkup} from 'react-dom/server'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; \n\nimport { Provider } from 'react-redux';\nimport { LocalizeProvider } from 'react-localize-redux';\nimport translations from './translations.json';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from \"./store\";\n\nconst localizedLanguages = [\n  { name: \"English\", code: \"en\" },\n  { name: \"Spanish\", code: \"es\" },\n  { name: \"French\", code: \"fr\" }\n];\n\nconst localizeInit = {\n  languages: localizedLanguages,\n  translation: translations,\n  options: {\n    renderToStaticMarkup,\n    defaultLanguage:\n      localizedLanguages.find(l => l.code === navigator.language) !== undefined\n        ? navigator.language\n        : \"en\"\n  }\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <LocalizeProvider initialize={localizeInit}>\n          <PersistGate loading={null} persistor={persistor}>\n            <App />\n          </PersistGate>\n      </LocalizeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}