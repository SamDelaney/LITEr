{"version":3,"sources":["components/FEComponents/PickDataSource.tsx","components/FEComponents/InterlinearDisplay.tsx","components/FEComponents/PickFormatStyle.tsx","components/FEComponents/ReferenceSelect.tsx","components/FEComponents/FESwitches.tsx","components/FEColumn.tsx","pages/MainPage.tsx","pages/Settings.tsx","pages/History.tsx","pages/Styles.tsx","components/LITEAppBar.tsx","App.tsx","serviceWorker.ts","rootReducer.ts","store.ts","index.tsx"],"names":["withLocalize","React","useState","filename","state","setState","Container","maxWidth","Grid","container","item","xs","FormControl","NativeSelect","value","onChange","event","name","target","inputProps","FormHelperText","id","Button","variant","Card","CardContent","Typography","InputBase","multiline","rows","fullWidth","className","formatStyle","IconButton","aria-label","component","Link","to","AddCircleOutline","props","referenceName","FormLabel","selectLabel","RadioGroup","FormControlLabel","control","Radio","label","TextField","FormGroup","row","Switch","Main","InterlinearDisplay","SettingsPageStyles","makeStyles","theme","createStyles","paper","borderRadius","padding","margin","width","classes","language","activeLanguage","code","Paper","setActiveLanguage","localizedLanguages","map","lang","History","FormatStyles","AppBarStyles","appBar","zIndex","drawer","title","flexGrow","menuButton","marginRight","spacing","open","drawerOpen","AppBar","position","Toolbar","edge","color","onClick","type","key","Menu","AccountCircle","Drawer","List","ListItem","button","ListItemIcon","Assignment","ListItemText","primary","Style","Divider","AppRouter","basename","path","exact","MainPage","SettingsPage","Boolean","window","location","hostname","match","defaultState","darkThemeOn","rootReducer","combineReducers","localize","localizeReducer","temp","action","persistConfig","storage","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","localizeInit","languages","translation","translations","options","renderToStaticMarkup","defaultLanguage","undefined","find","l","navigator","ReactDOM","render","StrictMode","initialize","loading","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.729e198e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Translate, withLocalize } from 'react-localize-redux';\r\nimport { Container, FormControl, NativeSelect, FormHelperText, Button, Grid } from '@material-ui/core';\r\n\r\n\r\ninterface PickDataSourceState {\r\n    filename: string;\r\n}\r\n\r\nfunction PickDataSource() {\r\n\r\n    const [state, setState] = React.useState<PickDataSourceState>({\r\n        filename: \"\"\r\n    });\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: string }>) => {\r\n        const name = event.target.name as keyof typeof state;\r\n        setState({\r\n          ...state,\r\n          [name]: event.target.value,\r\n        });\r\n      };\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n            <FormControl>\r\n                <NativeSelect\r\n                value={state.filename}\r\n                    onChange={handleChange}\r\n                    inputProps={{\r\n                        name: 'filename'\r\n                    }}\r\n                    >\r\n                    <option value={1}>IcelandicExample</option> \r\n                    <option value={2}>Marubo</option>\r\n                    <option value={3}>Sena</option>\r\n                    <option value={4}>Vulcan</option>\r\n                    {/* these values are temporary*/}\r\n                </NativeSelect>\r\n                <FormHelperText> <Translate id=\"pickDataSource.dataSource\" /> </FormHelperText>\r\n            </FormControl>\r\n            </Grid>\r\n                <Grid item xs={6}> \r\n                    <Button variant=\"contained\">\r\n                        <Translate id=\"pickDataSource.addDataSource\" />\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(PickDataSource);","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport PickDataSource from './PickDataSource';\r\nimport { CardContent, Typography, InputBase } from '@material-ui/core';\r\nimport { Translate, withLocalize } from 'react-localize-redux';\r\n\r\nfunction InterlinearColumn() {\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <PickDataSource />\r\n            <Card variant='outlined'>\r\n                <CardContent>\r\n                    <Typography>\r\n                        <Translate id=\"interlinearDisplay.input\" />\r\n                    </Typography>\r\n                    <InputBase\r\n                        multiline\r\n                        rows={4}\r\n                        fullWidth\r\n                        inputProps={{ 'aria-label': 'naked' }}\r\n                    />\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Card variant='outlined'>\r\n                <CardContent>\r\n                    <Typography>\r\n                        <Translate id=\"interlinearDisplay.output\" />\r\n                    </Typography>\r\n                    <div className='OutputField'/>\r\n                </CardContent>\r\n            </Card>\r\n            <Button> <Translate id=\"interlinearDisplay.copy\"/> </Button>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(InterlinearColumn);","import React from 'react';\r\n\r\nimport { AddCircleOutline } from '@material-ui/icons';\r\nimport { Translate, withLocalize } from 'react-localize-redux';\r\nimport { Container, FormControl, NativeSelect, FormHelperText, IconButton } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\ninterface PickFormatStyleState {\r\n    formatStyle: string;\r\n}\r\n\r\nfunction PickFormatStyle() {\r\n\r\n    const [state, setState] = React.useState<PickFormatStyleState>({\r\n        formatStyle: \"\"\r\n    });\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: string }>) => {\r\n        const name = event.target.name as keyof typeof state;\r\n        setState({\r\n          ...state,\r\n          [name]: event.target.value,\r\n        });\r\n      };\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <FormControl>\r\n                <NativeSelect\r\n                value={state.formatStyle}\r\n                    onChange={handleChange}\r\n                    inputProps={{\r\n                        name: 'formatStyle'\r\n                    }}\r\n                    >\r\n                    <option value={1}>3-line GSRL Standard</option> \r\n                    <option value={2}>4-line GSRL Standard</option>\r\n                    {/* these values are temporary*/}\r\n                </NativeSelect>\r\n                <FormHelperText> <Translate id=\"pickFormatStyle.formatStyle\" /> </FormHelperText>\r\n            </FormControl>\r\n\r\n            <IconButton aria-label=\"create\" component={Link} to=\"/styles\">\r\n                    <AddCircleOutline />\r\n            </IconButton>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(PickFormatStyle);","import React from 'react';\r\n\r\nimport { Translate, withLocalize, LocalizeContextProps } from 'react-localize-redux';\r\nimport { Container, RadioGroup, Radio, FormControlLabel, TextField, Grid, FormLabel} from '@material-ui/core';\r\n\r\n\r\ninterface ReferenceSelectState {\r\n    referenceName: string;\r\n}\r\n\r\ninterface ReferenceSelectProps {\r\n    selectLabel: string;\r\n}\r\n\r\nfunction ReferenceSelect(props:  ReferenceSelectProps & LocalizeContextProps) {\r\n\r\n    const [state, setState] = React.useState<ReferenceSelectState>({\r\n        referenceName: \"\"\r\n    });\r\n\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <FormLabel><Translate id={\"referenceSelect.\" + props.selectLabel} /> </FormLabel>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <RadioGroup>\r\n                        <FormControlLabel value=\"first\" control={<Radio />} label={<Translate id='referenceSelect.firstOption'/>} />\r\n                        <FormControlLabel value=\"right\" control={<Radio />} label={<Translate id='referenceSelect.rightOption'/>} />\r\n                        <FormControlLabel value=\"none\" control={<Radio />} label={<Translate id='referenceSelect.noneOption'/>} />\r\n                    </RadioGroup>\r\n                </Grid>\r\n                <Grid item xs={6}> \r\n                    <TextField label={<Translate id=\"referenceSelect.name\"/>}/>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(ReferenceSelect);","import React from 'react';\r\nimport {withLocalize, Translate} from 'react-localize-redux';\r\nimport { FormGroup, FormControlLabel, Switch, Container } from '@material-ui/core';\r\n\r\nfunction FESwitches() {\r\n    return(\r\n        <Container maxWidth=\"sm\">\r\n            <FormGroup row={true}>\r\n                <FormControlLabel value=\"lit\" control={<Switch />} label={<Translate id='FESwitches.literalTranslation'/>}/>\r\n                <FormControlLabel value=\"notes\" control={<Switch />} label={<Translate id='FESwitches.notes'/>}/>\r\n                <FormControlLabel value=\"ungramm\" control={<Switch />} label={<Translate id='FESwitches.ungrammatical'/>}/>\r\n            </ FormGroup>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default withLocalize(FESwitches);","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport { withLocalize } from 'react-localize-redux';\r\nimport { ReferenceSelect, PickFormatStyle, FESwitches} from './FEComponents';\r\n\r\n\r\n\r\nfunction FEColumn() {\r\n    return (\r\n        <Container maxWidth='sm'>\r\n            <PickFormatStyle />\r\n            <ReferenceSelect selectLabel={\"languageNameSelect\"}/>\r\n            <ReferenceSelect selectLabel={\"dataSourceRefSelect\"}/>\r\n            <FESwitches />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withLocalize(FEColumn);","import React from 'react';\r\n\r\nimport InterlinearDisplay from '../components/FEComponents/InterlinearDisplay';\r\nimport FEColumn from '../components/FEColumn';\r\n\r\nfunction Main() {\r\n    return (\r\n        <>\r\n            <div className=\"MainRow\">\r\n                <InterlinearDisplay />\r\n                <FEColumn />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { Paper, Theme, makeStyles, createStyles, FormControl, NativeSelect, FormLabel } from '@material-ui/core';\r\nimport { Translate, withLocalize, LocalizeContextProps } from 'react-localize-redux';\r\nimport { localizedLanguages } from \"../index\";\r\n\r\ninterface SettingsState {\r\n    language: string;\r\n}\r\n\r\nconst SettingsPageStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paper: {\r\n            borderRadius: 15,\r\n            padding: 40,\r\n            margin: 20,\r\n            width: '55%'\r\n        }\r\n    })\r\n);\r\n\r\nfunction SettingsPage(props: LocalizeContextProps) {\r\n    const classes = SettingsPageStyles();\r\n\r\n    const [state, setState] = React.useState<SettingsState>({\r\n        language: props.activeLanguage.code\r\n    })\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ name?: string; value: string }>) => {\r\n        const name = event.target.name as keyof typeof state;\r\n        setState({\r\n          ...state,\r\n          [name]: event.target.value,\r\n        });\r\n        props.setActiveLanguage(event.target.value); //this calls before setState() completes\r\n      };\r\n\r\n    return (\r\n        <Paper variant=\"outlined\" className={classes.paper}>\r\n            <h1><Translate id={\"settingsPage.title\"}/></h1>\r\n            \r\n            <FormControl>\r\n                <FormLabel><Translate id={\"settingsPage.language\"} /></FormLabel>\r\n                <NativeSelect onChange={handleChange} inputProps={{name: 'language'}} value={state.language}>\r\n                    {localizedLanguages.map((lang) => {\r\n                        return (\r\n                            <option value={lang.code}>{lang.name}</option>\r\n                        )\r\n                    })}\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default withLocalize(SettingsPage);","import React from 'react';\r\n\r\nfunction History() {\r\n    return (\r\n        <div>\r\n            <h1> History Page Placeholder </h1>\r\n            LITEr is under development. Check back later for more updates!\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default History;","import React from 'react';\r\n\r\nfunction FormatStyles() {\r\n    return (\r\n        <div>\r\n            <h1> Format Styles Placeholder</h1>\r\n            LITEr is under development. Check back later for more updates!\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormatStyles;","import React from 'react';\r\nimport { withLocalize, Translate } from 'react-localize-redux';\r\nimport {AppBar, Toolbar, IconButton, Typography, makeStyles, Theme, createStyles, Drawer, List, ListItem, ListItemText, ListItemIcon, Divider} from '@material-ui/core';\r\nimport {Menu, AccountCircle, Settings, History, Assignment, Style} from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst AppBarStyles = makeStyles((theme: Theme) => \r\n    createStyles({\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n        },\r\n        title: {\r\n            flexGrow: 1\r\n        },\r\n        drawer: {\r\n            width: drawerWidth\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2)\r\n        }\r\n    }),\r\n);\r\n\r\nfunction LITEAppBar() {\r\n    const classes = AppBarStyles();\r\n\r\n    const [state, setState] = React.useState({\r\n        drawerOpen: false\r\n    });\r\n\r\n    const toggleDrawer = (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent,\r\n        ) => {\r\n          if (\r\n            event.type === 'keydown' &&\r\n            ((event as React.KeyboardEvent).key === 'Tab' ||\r\n              (event as React.KeyboardEvent).key === 'Shift')\r\n          ) {\r\n            return;\r\n          }\r\n      \r\n          setState({ ...state, drawerOpen: open });\r\n        };\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\" className={classes.appBar}>\r\n                <Toolbar >\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawer(!state.drawerOpen)}>\r\n                        <Menu />\r\n                    </IconButton>\r\n\r\n                    <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\r\n                        LITEr\r\n                    </Typography>\r\n\r\n                    <IconButton\r\n                        aria-label=\"account\"\r\n                        color=\"inherit\"\r\n                    >\r\n                        <AccountCircle />\r\n                    </IconButton>\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            aria-label=\"settings\"\r\n                            color=\"inherit\"\r\n                            component={Link}\r\n                            to=\"/settings\"\r\n                        >                            \r\n                                <Settings />\r\n                        </IconButton>\r\n                </Toolbar >\r\n            </AppBar>\r\n            <Drawer variant=\"persistent\" open={state.drawerOpen} className={classes.drawer} classes={{paper: classes.drawer}}>\r\n                <Toolbar />\r\n                <List>\r\n                    <ListItem button key=\"convert\" component={ Link } to=\"/\">\r\n                        <ListItemIcon><Assignment /></ListItemIcon>\r\n                        <ListItemText primary={<Translate id=\"menuDrawer.convert\" />}/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"styles\" component={ Link } to=\"/styles\">\r\n                        <ListItemIcon><Style /></ListItemIcon>\r\n                        <ListItemText primary={<Translate id=\"menuDrawer.styles\" />}/>\r\n                    </ListItem>\r\n                    <ListItem button key=\"history\" component={ Link } to=\"/history\">\r\n                        <ListItemIcon><History /></ListItemIcon>\r\n                        <ListItemText primary={<Translate id=\"menuDrawer.history\" />}/>\r\n                    </ListItem>\r\n                    \r\n                    <Divider />\r\n\r\n                    <ListItem button key=\"settings\" component={ Link } to=\"/settings\">\r\n                        <ListItemIcon><Settings /></ListItemIcon>\r\n                        <ListItemText primary={<Translate id=\"menuDrawer.settings\" />}/>\r\n                    </ListItem>\r\n                </List>\r\n            </Drawer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withLocalize(LITEAppBar);","import React from 'react';\r\nimport MainPage from './pages/MainPage';\r\nimport SettingsPage from './pages/Settings';\r\nimport History from './pages/History';\r\nimport FormatStyles from './pages/Styles';\r\nimport './App.css';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport LITEAppBar from './components/LITEAppBar';\r\n\r\nfunction AppRouter() {\r\n  return (\r\n    <>\r\n      <HashRouter basename='/'>\r\n        <LITEAppBar />\r\n        <div className='App-header'>\r\n          <Route path=\"/\" exact component = {MainPage} />\r\n          <Route path=\"/settings\" exact component = {SettingsPage} />\r\n          <Route path=\"/history\" exact component = {History} />\r\n          <Route path=\"/styles\" exact component = {FormatStyles} />\r\n        </div>\r\n      </HashRouter>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AppRouter;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, Reducer} from 'redux';\r\nimport { localizeReducer, LocalizeState } from 'react-localize-redux';\r\n\r\n\r\nexport interface StoreState {\r\n    temp: TempState;\r\n    localize: LocalizeState;\r\n}\r\n\r\ninterface TempState {\r\n  darkThemeOn: Boolean;\r\n}\r\n\r\nconst TEMP_ACTION = \"TEMP_ACTION\";\r\ntype TEMP_ACTION = typeof TEMP_ACTION;\r\n\r\ninterface TempAction {\r\n  type: TEMP_ACTION\r\n}\r\n\r\nexport type TempActions = TempAction;\r\n\r\nconst defaultState : TempState = {\r\n   darkThemeOn: false\r\n};\r\n\r\nexport const tempReducer = (state: TempState | undefined, action: TempActions): TempState => {\r\n    if (typeof state === 'undefined') {\r\n      state = defaultState // If state is undefined, initialize it with a default value\r\n    }\r\n    \r\n    return state;\r\n  }\r\n\r\nconst rootReducer: Reducer<StoreState> = combineReducers<StoreState>({\r\n  localize: localizeReducer,\r\n  temp: tempReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\nexport const persistor = persistStore(store);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {renderToStaticMarkup} from 'react-dom/server'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker'; \r\n\r\nimport { Provider } from 'react-redux';\r\nimport { LocalizeProvider } from 'react-localize-redux';\r\nimport translations from './translations.json';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from \"./store\";\r\n\r\nexport const localizedLanguages = [\r\n  { name: \"English\", code: \"en\" },\r\n  { name: \"Español\", code: \"es\" },\r\n  { name: \"Français\", code: \"fr\" }\r\n];\r\n\r\nconst localizeInit = {\r\n  languages: localizedLanguages,\r\n  translation: translations,\r\n  options: {\r\n    renderToStaticMarkup,\r\n    defaultLanguage:\r\n      localizedLanguages.find(l => l.code === navigator.language) !== undefined\r\n        ? navigator.language\r\n        : \"en\"\r\n  }\r\n};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <LocalizeProvider initialize={localizeInit}>\r\n          <PersistGate loading={null} persistor={persistor}>\r\n            <App />\r\n          </PersistGate>\r\n      </LocalizeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}